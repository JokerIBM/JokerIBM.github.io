<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>创建第一个神经网络</title>
    <link href="/2020/09/27/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2020/09/27/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p>More info: <a href="https://zhuanlan.zhihu.com/p/65472471">神经网络链接资料</a><br>1.神经网络有输入层，隐藏层，输出层<br>要先创造层</p><pre><code class="hljs reasonml">import tensorflow <span class="hljs-keyword">as</span> tf###定义层def add<span class="hljs-constructor">_layer(<span class="hljs-params">inputs</span>,<span class="hljs-params">in_size</span>,<span class="hljs-params">out_siez</span>,<span class="hljs-params">activation_function</span>=None)</span>:Weights = tf.<span class="hljs-constructor">Variable(<span class="hljs-params">tf</span>.<span class="hljs-params">rondom_normal</span>([<span class="hljs-params">inputs</span>,<span class="hljs-params">out_siez</span>])</span>#创建输入和输出层为随机矩阵biase = tf.<span class="hljs-constructor">Variable(<span class="hljs-params">tf</span>.<span class="hljs-params">zeros</span>([1,<span class="hljs-params">out_siez</span>]+0.1)</span>#创建值列表为<span class="hljs-number">1</span>,初始值不能为<span class="hljs-number">0</span>wx_plus_b = tf.matmul(inputs,Weights) + biase #矩阵运算公式X*W1+B1，没有激活的值#####是否使用激励函数<span class="hljs-keyword">if</span> activation_function is None:output = wx_plus_b<span class="hljs-keyword">else</span>:output = activation<span class="hljs-constructor">_function(<span class="hljs-params">wx_plus_b</span>)</span>return output</code></pre>]]></content>
    
    
    <categories>
      
      <category>Tensorflow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于mo平台使用tensorflow数据训练</title>
    <link href="/2020/09/14/tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <url>/2020/09/14/tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>根据例子和视频分析</p><p>More info: <a href="https://mofanpy.com/tutorials/machine-learning/tensorflow/example2/">教程请点击</a><br>结构图如下<br><img src="/2020/09/14/tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" srcset="/img/loading.gif" alt="结构图"></p><p>1.会需要用到两个模块nump和tensorflow：</p><pre><code class="hljs elm"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</code></pre><p>2.创建数据：</p><pre><code class="hljs apache"><span class="hljs-attribute">x_data</span> = np.random.rand(<span class="hljs-number">100</span>).astype(np.float<span class="hljs-number">32</span>)#随机创建<span class="hljs-number">100</span>个数列[np.random.rand], 转换数据类型[astype]<span class="hljs-attribute">y_data</span> = x_data*<span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">3</span> #create = (w*x+y)公式，w是神经网络参数，x&amp;y是数据点</code></pre><p>其中使用nump的np.random.rand()是随机生成一百个数列</p><p>2.5开始创建结构</p><pre><code class="hljs apache"><span class="hljs-attribute">Weights</span> = tf.Variable(tf.random_uniform([<span class="hljs-number">1</span>], -<span class="hljs-number">1</span>.<span class="hljs-number">0</span>, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>))# 初始化数据（variable），随机数列（tf.random_uniform）的范围是<span class="hljs-number">1</span>维，随机数列生成的范围-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>，<span class="hljs-number">1</span>.<span class="hljs-number">0</span><span class="hljs-attribute">biases</span> = tf.Variable(tf.zeros([<span class="hljs-number">1</span>]))#定义初始值为O让他一步一步学习</code></pre><p>3.提升精准度和预测误差：</p><pre><code class="hljs ini"><span class="hljs-attr">y</span> = Weights*x_data + biases<span class="hljs-comment"># 提升准确度</span><span class="hljs-attr">loss</span> = tf.reduce_mean(tf.square(y-y_data))<span class="hljs-comment">#预测误差</span></code></pre><p>其中Weights*x_data + biases可以理解为，一维张量</p><p>4.使用优化器优化误差和进行学习效率</p><pre><code class="hljs ini"><span class="hljs-attr">optimizer</span> = tf.train.GradientDescentOptimizer(<span class="hljs-number">0.5</span>)<span class="hljs-comment">#优化器学习效率</span><span class="hljs-attr">train</span> = optimizer.minimize(loss)<span class="hljs-comment">#把预算的误差优化</span></code></pre><p>5.初始化结构和激活神经网络：<br>激活网络时候一定要用Session.run，如果函数有Variable也一定要激活</p><pre><code class="hljs makefile">sess = tf.Session()<span class="hljs-comment">#初始化</span>init = tf.global_variables_initalizer()<span class="hljs-comment">#初始化</span>sess.run(init)<span class="hljs-comment">#激活</span></code></pre><p>6.激活后有效执行200次：</p><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> <span class="hljs-keyword">step</span> <span class="hljs-keyword">in</span> range(200):    sess.<span class="hljs-builtin-name">run</span>(train)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">step</span> % 20 == 0:        <span class="hljs-builtin-name">print</span>(<span class="hljs-keyword">step</span>, sess.<span class="hljs-builtin-name">run</span>(Weights), sess.<span class="hljs-builtin-name">run</span>(biases))</code></pre><p>============================================<br>这是一条分割线<br>============================================</p><p>这是关于sess.run和Variable的用法<br>关于tf.Session的用法，Session是一个会话控制，写法:</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfx_data = tf.constant([[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]) <span class="hljs-comment">#常量</span>y_data = tf.constant([[<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>]])<span class="hljs-comment">#print(y_data)</span>product = tf.matmul(x_data,y_data)<span class="hljs-comment">#加起来</span><span class="hljs-comment">####</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">sess = tf.Session()</span><span class="hljs-string">result = sess.run(product)</span><span class="hljs-string">print(result)</span><span class="hljs-string"></span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment">#####最方便的用法之一</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">with tf.Session as sess:</span><span class="hljs-string">result = sess.run(product)</span><span class="hljs-string">print(result)&quot;&quot;&quot;</span><span class="hljs-string">&quot;</span></code></pre><p>Variable是一个变量控制，主要是tensorflow的初始值何变量值分开的<br>可以随意设置它的变量值</p><pre><code class="hljs reasonml">tf.<span class="hljs-constructor">Variable(<span class="hljs-params">initializer</span>,<span class="hljs-params">name</span>)</span>,参数<span class="hljs-keyword">initializer</span>是初始化参数，name是可自定义的变量名称</code></pre><p>但是有个重点，Variable是需要Sess.run流动起来的</p><pre><code class="hljs ini"><span class="hljs-attr">init</span> = tf.global_variables_initalizer()<span class="hljs-attr">sess</span> = sess.run(init)</code></pre><p>=============<br>分割线<br>=============<br>关于placeholder函数的使用，先看他的参数：</p><pre><code class="hljs fortran">tf<span class="hljs-number">.</span>placeholder(dtype,<span class="hljs-built_in">shape</span>=<span class="hljs-keyword">None</span>,<span class="hljs-keyword">name</span>=<span class="hljs-keyword">None</span>)</code></pre><p>dtype：数据类型，shape：数据形状，name：名称，其中dtype是一定要选择的参数<br>placeholder在程序中只会占位，避免和代码上下文产生冲突，使用feed_dict配合让placehold喂数据</p><pre><code class="hljs vim">input1 = <span class="hljs-keyword">tf</span>.placeholder(<span class="hljs-keyword">tf</span>.float32)#flow大部分支持<span class="hljs-number">32</span>类型input2 = <span class="hljs-keyword">tf</span>.placeholder(<span class="hljs-keyword">tf</span>.float32)output = <span class="hljs-keyword">tf</span>.multiply(input1,input2)#multiply是乘法函数with <span class="hljs-keyword">tf</span>.Session() <span class="hljs-keyword">as</span> ses<span class="hljs-variable">s:</span><span class="hljs-keyword">print</span>(sess.run(output,fleed_dict=&#123;input1:[<span class="hljs-number">3</span>.],input2:[<span class="hljs-number">2</span>.]&#125;))#使用fleed_dict喂入数据，和<span class="hljs-keyword">python</span>字典一样用法</code></pre>]]></content>
    
    
    <categories>
      
      <category>Tensorflow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基本安装</title>
    <link href="/2020/09/07/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%9F%E6%88%90%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/07/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%9F%E6%88%90%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>  ###安装<br>  1.需要安装nodejs+npm工具+git(linux环境下,win10下大同小异)<br>  <pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install nodejs</code></pre></p>   <pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install npm</code></pre>   <pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install git</code></pre><p>   1.1安装完成测试观察版本(node.js+npm)<br>   <pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> npm -v</code></pre><br>   2.安装hexo，安装之前创建文件夹名字没规定<br>   <pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre><br>    2.1安装观察hexo版本【和1.1一样的内容】<br> ###初始化<br>    1.初始化需要用到以下指令<br>    <pre><code class="hljs ebnf"><span class="hljs-attribute">hexo init</span></code></pre><br>    初始化后就生成以下主要文件夹<br>    &gt;node_modules: 依赖包<br>    &gt;public：存放生成的页面<br>    &gt;scaffolds：生成文章的一些模板<br>    &gt;source：用来存放你的文章<br>    &gt;themes：主题</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World，hexo生成的第一篇文章</title>
    <link href="/2020/09/05/hello-world/"/>
    <url>/2020/09/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
